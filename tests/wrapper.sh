#!/bin/bash

set -u #Ensure undefined variables are an error

###############################################################################
# Run a single test generated by run_tests.py. Not for direct human use.
###############################################################################

test_dir=$(pwd)

test_id=$1
description=$2
yaml_file=$3
run_args=$4
analysis_step_save_point=$5 # At what simulation-time to perform saving?
 
cd .. # Navigate to folder with run.sh

mkdir -p $test_dir/pass_logs
mkdir -p $test_dir/fail_logs
mkdir -p $test_dir/stagnant_logs

# Export for the interaction Lua file:

function run_test() {
    export HASHKAT_TEST_ID="$test_id"
    export HASHKAT_SAVE_NETWORK=$1
    export HASHKAT_LOAD_NETWORK=$2

    # Whether to save values such as #follows, #followings, etc to a file
    # for comparison with the same network grown after network loading
    export HASHKAT_CREATE_OBSERVABLES=$3
    export HASHKAT_ANALYSIS_STEP_SAVE_POINT=$analysis_step_save_point

    # Used to distinguish logs for the normal run, the saving run, and the loading run.
    SUFFIX=$4

    PASS_LOG=$test_dir/pass_logs/$test_id$SUFFIX.log # Log file location
    FAIL_LOG=$test_dir/fail_logs/$test_id$SUFFIX.log # Log file location
    STAGNANT_LOG=$test_dir/stagnant_logs/$test_id$SUFFIX.log # Log file location

    failed=false
    echo "LOG FILE for $test_id$SUFFIX WITH PARAMETERS: $description." > $FAIL_LOG

    # Uncomment to build with vector follow sets & et al, to isolate determinism problems:
#    export BUILD_FOLLOW_SET_AS_VECTOR=1
    if ! ./run.sh --input "$test_dir/$yaml_file" $run_args &>> "$FAIL_LOG"; then
        failed=true
    fi

    # Check for extra failure conditions, such as when using gdb:
    if grep -q "Program received signal" "$FAIL_LOG"; then
        failed=true
    elif grep -q "exited with code" "$FAIL_LOG"; then
        failed=true
    fi

    if $failed ; then
        echo -e "$test_id$SUFFIX has FAILED.\nDescription: $description"
        if [ "$HASHKAT_CREATE_OBSERVABLES" == 1 ] ; then
            echo "** Not attempting saving & loading tests on FAILED network."
            exit # We can get inconsistent results with failed networks
        fi
    elif grep -q "ANAMOLY: Stagnant network!" "$FAIL_LOG"; then
        echo "$test_id$SUFFIX STAGNANT. Finished with nothing to do! This may be expected if many features are off. ($description)"
        mv $FAIL_LOG $STAGNANT_LOG
        if [ "$HASHKAT_CREATE_OBSERVABLES" == 1 ] ; then
            echo "** Not attempting saving & loading tests on stagnant network."
            exit # We can get inconsistent results with stagnant networks
        fi
    else
        echo "$test_id$SUFFIX passed ($description)"
        mv $FAIL_LOG $PASS_LOG
        if [ "$HASHKAT_CREATE_OBSERVABLES" == 1 ] ; then
            echo "Final observables: $(cat "$test_dir/TEST_observables1.json" | sed 's/"//g')"
        fi
    fi
}

# First, run a normal test run, and save some 'observables' like the number of users at the end
# Second, run a test run with the same parameters, but save someway through it
# Third, run a test run, loading the second run, and comparing the 'observables' when the run ends

# NB: 0 means true in BASH (and 1 false), but we pass it to Lua as a false value (and 1 a true value).
# Thus to use these arguments in BASH we must check equality.
run_test 0 0 1 "-normal" # Don't load or save, DO create observables
run_test 1 0 0 "-saving" # Don't load; DO save
run_test 0 1 0 "-loading" # Don't save; DO load
